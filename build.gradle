group 'com.cluttered.cryptocurrency'
version '0.1.0-SNAPSHOT'

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'jacoco'

sourceCompatibility = 1.8

ext {
    _gradleVersion = '4.0.1'

    bigMathVersion = '1.2.0'
    slf4jVersion = '1.7.25'

    assertjVersion = '3.8.0'
    jmockitVersion = '1.33'
    junitVersion = '4.12'
}

repositories {
    mavenLocal()
    mavenCentral()
}

dependencies {
    compile "ch.obermuhlner:big-math:${bigMathVersion}"
    compile "org.slf4j:slf4j-api:${slf4jVersion}"
    compile "org.slf4j:slf4j-ext:${slf4jVersion}"

    testCompile "org.slf4j:slf4j-simple:${slf4jVersion}"
    testCompile "org.assertj:assertj-core:${assertjVersion}"
    testCompile "org.jmockit:jmockit:${jmockitVersion}"
    testCompile "junit:junit:${junitVersion}"
}

test {
    testLogging {
        events "passed", "skipped", "failed", "standardOut", "standardError"
    }
}

task codeCoverageReport(type: JacocoReport) {
    dependsOn = tasks.withType(Test)
    additionalSourceDirs = files(sourceSets.main.allSource.srcDirs, subprojects.sourceSets.main.allSource.srcDirs)
    sourceDirectories = files(sourceSets.main.allSource.srcDirs, subprojects.sourceSets.main.allSource.srcDirs)
    classDirectories = files(sourceSets.main.output, subprojects.sourceSets.main.output)
    executionData = files(jacocoTestReport.executionData, subprojects.jacocoTestReport.executionData)
    reports {
        html.enabled = true
        xml.enabled = true
    }

    onlyIf = {
        true
    }

    doFirst {
        executionData = files(executionData.findAll {
            it.exists()
        })
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = _gradleVersion
}